diff --git i/rc/control/bookkeeping.py w/rc/control/bookkeeping.py
index 00956cf..24638fa 100644
--- i/rc/control/bookkeeping.py
+++ w/rc/control/bookkeeping.py
@@ -884,7 +884,7 @@ def bookkeeping_for_fhicl_documents_artdaq_v3_base(self):
                     "BoardReader" in procinfo.name
                     and procinfo.label not in nonsending_boardreaders
                 ):
-                    for token in ["[Ww]indow", "[Ss]ingle", "[Bb]uffer"]:
+                    for token in ["[Ww]indow", "[Ss]ingle", "[Bb]uffer", "[Ss]equence" ]:
                         res = re.search(
                             r"\n\s*request_mode\s*:\s*\"?%s\"?" % (token),
                             procinfo.fhicl_used,
@@ -941,6 +941,20 @@ def bookkeeping_for_fhicl_documents_artdaq_v3_base(self):
                     multicast_interface_ip = list(
                         private_networks_seen_by_processes_involved_in_requests
                     )[0]
+
+                    multicast_interface_ip_to_use = os.getenv('MULTICAST_INTERFACE_IP_TO_USE')
+                    if len(list(private_networks_seen_by_processes_involved_in_requests))>1:
+                        if multicast_interface_ip_to_use is None:
+                            self.print_log('w', 'More than one private network visible to all processes: '
+                                + ', '.join(list(private_networks_seen_by_processes_involved_in_requests))
+                                + ', do not know which to use, defaulting to: ' + multicast_interface_ip
+                                + '; consider defining MULTICAST_INTERFACE_IP_TO_USE env variable')
+                        else:
+                            multicast_interface_ip = multicast_interface_ip_to_use
+                            self.print_log('i', 'More than one private network visible to all processes: '
+                                + ', '.join(list(private_networks_seen_by_processes_involved_in_requests))
+                                + ', using MULTICAST_INTERFACE_IP_TO_USE env variable: ' + multicast_interface_ip)
+
                     for process_involved_in_request in processes_involved_in_requests:
                         for i_proc in range(len(self.procinfos)):
                             if (
diff --git i/rc/control/config_functions_database_v2.py w/rc/control/config_functions_database_v2.py
index 2e6a90c..7ee51e8 100644
--- i/rc/control/config_functions_database_v2.py
+++ w/rc/control/config_functions_database_v2.py
@@ -5,13 +5,14 @@

 import os
 import sys
+import re

 sys.path.append(os.environ["ARTDAQ_DAQINTERFACE_DIR"])

 dbdirs = [
     dbdir
     for dbdir in os.environ["PYTHONPATH"].split(":")
-    if "/artdaq_database/" in dbdir
+    if re.search(r"/artdaq[-_]database/", dbdir)
 ]
 assert (
     len(dbdirs) == 1
@@ -25,7 +26,6 @@ from rc.control.utilities import fhiclize_document
 import shutil
 from shutil import copyfile

-import re
 import os
 import string
 from time import time
diff --git i/rc/control/daqinterface.py w/rc/control/daqinterface.py
index 855de99..2b06f39 100755
--- i/rc/control/daqinterface.py
+++ w/rc/control/daqinterface.py
@@ -2038,7 +2038,7 @@ class DAQInterface(Component):
         if len(needed_packages) == 0:
             return

-        if "artdaq_daqinterface" in packages:
+        if self.productsdir is not None and "artdaq_daqinterface" in packages:
             assert (
                 len(packages) == 1
             ), "Note to developer: you'll probably need to refactor save_run_records.py if you want to get the version of other packages alongside the version of DAQInterface"
@@ -2054,7 +2054,7 @@ class DAQInterface(Component):
             )
         elif self.spackdir != None:
             cmd = (
-                "%s ; . %s; spack find --loaded | sed -r -n 's/^(%s)@(\\S+).*/\\1 \\2/p'" % (
+                "%s ; . %s; spack find -d --loaded | sed -r -n 's/^\s+(%s)@(\\S+).*/\\1 \\2/p'" % (
                     ";".join(get_setup_commands(self.productsdir, self.spackdir)),
                     self.daq_setup_script,
                     "|".join(needed_packages),
@@ -2071,11 +2071,22 @@ class DAQInterface(Component):
                 stdin=subprocess.PIPE,
                 encoding="utf-8",
             )
-
             out, err = proc.communicate()
             stdoutlines = out.strip().split("\n")
             stderrlines = err.strip().split("\n")

+
+            unwanted_warnings = [
+                'WARNING: unable to determine tty. While this will not affect',
+                'actual datataking, any DAQInterface launched in this environment',
+                'may have problems with sending output to a MessageViewer instance'
+            ]
+
+            stderrlines = [
+                line for line in stderrlines
+                if not any(warning in line for warning in unwanted_warnings)
+            ]
+
             for line in stderrlines:
                 if not line or not line.strip():
                     stderrlines.remove(line)
diff --git i/rc/control/utilities.py w/rc/control/utilities.py
index 44dc6a5..35e21b6 100755
--- i/rc/control/utilities.py
+++ w/rc/control/utilities.py
@@ -1250,7 +1250,8 @@ def get_setup_commands(productsdir=None, spackdir=None, log_file=None):
             output.append('. %s/share/spack/setup-env.sh' % (spackdir))
         else:
             output.append('. %s/share/spack/setup-env.sh >> %s 2>&1' % (spackdir, log_file))
-        output.append('spack unload > /dev/null 2>&1')
+        if os.environ.get("DAQINTERFACE_SPACK_UNLOAD", "false").lower() == "true":
+            output.append('spack unload > /dev/null 2>&1')
     return output

 def kill_tail_f():
